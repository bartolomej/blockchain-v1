/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package blockchain_test2;

import static blockchain_test2.Chain.addBlock;
import static blockchain_test2.Chain.blockchain;
import static blockchain_test2.Chain.coinbase;
import static blockchain_test2.Chain.genesisB;
import static blockchain_test2.Chain.genesisT;
import static blockchain_test2.Chain.wallet;
import com.google.gson.GsonBuilder;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.util.Timer;

/**
 *
 * @author mej
 */


public class MainFrame extends javax.swing.JFrame {

    public static ArrayList<Block> blockchain = new ArrayList<Block>();
    
    public ArrayList<Wallet> wallets = new ArrayList<Wallet>(); //not used
    
    public static float minimumTransaction = 0.1f;
    
    public int index = 0;
    
    //modify genesys transaction
    public static Wallet genesis;
    public static Transaction genesisT; 
    public static Block genesisB;
    
    //senders
    public PrivateKey privateKey;
    public PublicKey publicKey;
    
    //recievers
    public PublicKey pubAddress;
    
    public float value;
    
    public String privateKeyS;
    public String publicKeyS;
    
    public int blockTransactions = 2;
    
    private ArrayList<Transaction> allTransactions = new ArrayList<Transaction>();
    private ArrayList<Transaction> transactionCache = new ArrayList<Transaction>();
    
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() throws UnsupportedEncodingException {
        initComponents();
        jPanel5.setVisible(false);
        jButton1.setEnabled(false);
        
        genesis = new Wallet();
        
        
        
        ChangeListener changeListener = new ChangeListener() {
            public void stateChanged(ChangeEvent changeEvent) {
                jTabbedPane1 = (JTabbedPane) changeEvent.getSource();
                int index = jTabbedPane1.getSelectedIndex();
            }
        };
        jTabbedPane1.addChangeListener(changeListener);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTextField7 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jTextField8 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(null);

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1000, 100));

        jPanel1.setLayout(null);

        jPanel5.setLayout(null);

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jPanel5.add(jTextField3);
        jTextField3.setBounds(180, 180, 310, 40);
        jPanel5.add(jTextField4);
        jTextField4.setBounds(500, 180, 50, 40);

        jButton3.setText("SEND");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton3);
        jButton3.setBounds(370, 250, 90, 50);

        jLabel4.setText("SEND TO ADDRESS");
        jPanel5.add(jLabel4);
        jLabel4.setBounds(180, 156, 130, 30);

        jLabel5.setText("AMOUNT");
        jPanel5.add(jLabel5);
        jLabel5.setBounds(500, 156, 50, 30);

        jButton6.setText("BACK");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton6);
        jButton6.setBounds(50, 402, 77, 40);

        jButton7.setText("IMPORT ADDRESS");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton7);
        jButton7.setBounds(210, 260, 140, 30);

        jButton8.setText("BALANCE");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton8);
        jButton8.setBounds(330, 310, 140, 30);
        jPanel5.add(jLabel16);
        jLabel16.setBounds(570, 290, 60, 20);

        jPanel1.add(jPanel5);
        jPanel5.setBounds(0, 0, 750, 490);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1);
        jTextField1.setBounds(295, 152, 240, 38);

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField2);
        jTextField2.setBounds(295, 216, 240, 37);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel1.setText("PRIVATE KEY:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(295, 132, 110, 14);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel2.setText("PUBLIC KEY:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(295, 196, 110, 14);

        jButton1.setText("UNLOCK WALLET");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(353, 314, 142, 47);

        jButton2.setText("Import File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(370, 270, 100, 32);

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel11.setText("UNLOCK WALLET");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(300, 50, 230, 47);
        jPanel1.add(jLabel3);
        jLabel3.setBounds(360, 370, 130, 20);

        jTabbedPane1.addTab("View & Send", jPanel1);

        jPanel4.setMinimumSize(new java.awt.Dimension(800, 30));
        jPanel4.setPreferredSize(new java.awt.Dimension(800, 100));

        jTextArea1.setEditable(false);
        jTextArea1.setRows(31);
        jTextArea1.setTabSize(10);
        jTextArea1.setPreferredSize(null);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 756, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 44, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("View Blockchain", jPanel4);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 39, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 28, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("View Transactions", jPanel6);

        jPanel2.setLayout(null);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel7.setText("PRIVATE KEY:");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(270, 180, 110, 18);

        jButton5.setText("GENERATE KEYS");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton5);
        jButton5.setBounds(310, 340, 140, 47);

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });
        jPanel2.add(jTextField5);
        jTextField5.setBounds(270, 210, 229, 35);

        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });
        jPanel2.add(jTextField6);
        jTextField6.setBounds(270, 270, 229, 33);

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel8.setText("KEY GENERATOR");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(268, 75, 207, 47);

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel9.setText("PUBLIC KEY:");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(270, 250, 100, 14);

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel10.setText("Save generated keys !");
        jPanel2.add(jLabel10);
        jLabel10.setBounds(270, 120, 140, 22);

        jTabbedPane1.addTab("Create New Wallet", jPanel2);

        jPanel3.setLayout(null);
        jPanel3.add(jTextField7);
        jTextField7.setBounds(170, 170, 220, 40);

        jLabel6.setText("SIGNATURE");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(170, 150, 90, 16);

        jButton4.setText("VERIFY");
        jPanel3.add(jButton4);
        jButton4.setBounds(307, 262, 100, 40);
        jPanel3.add(jTextField8);
        jTextField8.setBounds(400, 170, 220, 40);

        jLabel12.setText("PUBLIC KEY");
        jPanel3.add(jLabel12);
        jLabel12.setBounds(400, 150, 150, 16);

        jLabel13.setText("jLabel13");
        jPanel3.add(jLabel13);
        jLabel13.setBounds(290, 230, 140, 30);

        jTabbedPane1.addTab("Sign & Verify", jPanel3);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 0, 785, 535);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("About");

        jMenuItem1.setText("jMenuItem1");
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        jTextField2.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
               update();
            }    

            @Override
            public void insertUpdate(DocumentEvent e) {
                update();
                
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                update();
                
            }
        });
    }//GEN-LAST:event_jTextField2ActionPerformed

    // popravi ---> zdruzi z spodnjo funkcijo
    public void update() {
        if (jTextField2.getText().length()<100){
                    JOptionPane.showMessageDialog(null,
                            "Invalid PublicKey!", "Error Message",
                            JOptionPane.INFORMATION_MESSAGE);
                    jButton1.setEnabled(false);
        } else {
            jButton1.setEnabled(true);
        }
        if (jTextField1.getText().length()<168){
                    JOptionPane.showMessageDialog(null,
                            "Invalid PrivateKey!", "Error Message",
                            JOptionPane.INFORMATION_MESSAGE);
                    jButton1.setEnabled(false);
        } else {
            jButton1.setEnabled(true);
        }
    }
    
    boolean isCoinbase = true;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            //if(jTextField1.getText().length()==168&&jTextField2.getText().length()==100) {
                jPanel5.setVisible(true);
                jButton1.setVisible(false);
                jButton2.setVisible(false);
            //}
            // dodaj pogoj - samo prvi vstop -> coibase transaction
                if(isCoinbase) {
                    coinbaseTransaction();
                    //genesisBlock();
                    isCoinbase = false;
                }
            
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      
            JFileChooser fileChooser = new JFileChooser();
            if(fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    File file = fileChooser.getSelectedFile();
                    try {
                        readWallet(file);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                }
            }
            
            jButton1.setEnabled(true);
        
    }//GEN-LAST:event_jButton2ActionPerformed
    int clicked = 0;
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            Wallet wallet = new Wallet();
            writeWallet(wallet);
            jTextField5.setText(StringUtil.getStringFromKey(wallet.privateKey));
            jTextField5.setText(StringUtil.getStringFromKey(wallet.publicKey));
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    public void writePubKey(PublicKey pubKey) throws FileNotFoundException, IOException {
        String namePath = chooser.getSelectedFile() + "\\" + String.valueOf(date) + ".address";
        File file = new File(namePath);
        FileOutputStream fos = new FileOutputStream(file);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(pubKey);
            oos.close();
    }
    
    public void readPubKey(File file) throws IOException, ClassNotFoundException {
        FileInputStream fis = new FileInputStream(file);
	ObjectInputStream ois = new ObjectInputStream(fis);
        PublicKey pubKey = (PublicKey) ois.readObject();
        this.pubAddress = pubKey;
        jTextField3.setText(StringUtil.getStringFromKey(pubKey));
    }
    
    long date;
    JFileChooser chooser;
    public void writeWallet(Wallet wallet) throws FileNotFoundException, IOException {
        chooser = new JFileChooser();
        chooser.setDialogTitle("Choose a directory.");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if(chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            date = new Date().getTime();
            String namePath = chooser.getSelectedFile() + "\\" + String.valueOf(date) + ".wallet";
            File file = new File(namePath);
            FileOutputStream fos = new FileOutputStream(file);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(wallet);
            oos.close();
        }
        writePubKey(wallet.publicKey);
    }
    
    public void readWallet(File file) throws FileNotFoundException, IOException, ClassNotFoundException {
        FileInputStream fis = new FileInputStream(file);
	ObjectInputStream ois = new ObjectInputStream(fis);
	Wallet wallet = (Wallet) ois.readObject();
	ois.close();
        jTextField1.setText(StringUtil.getStringFromKey(wallet.privateKey));
        jTextField2.setText(StringUtil.getStringFromKey(wallet.publicKey));
        this.publicKey = wallet.publicKey;
        this.privateKey = wallet.privateKey;
    }
    
    // NOT USED METHOD !
    public void writeToFile(String privKey, String pubKey) throws FileNotFoundException, UnsupportedEncodingException {
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Choose a directory.");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if(chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            long date = new Date().getTime();
            String namePath = chooser.getSelectedFile() + "\\" + String.valueOf(date) + ".txt";
            File file = new File(namePath);
            PrintWriter writer = new PrintWriter(file, "UTF-8");
            writer.println("Private Key: ");
            writer.println(privKey);
            writer.println("Public Key: ");
            writer.println(pubKey);
            writer.close();
        }
    }    
    
    
    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        this.value = Float.parseFloat(jTextField4.getText());
        try {
            newTransaction();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("transaction value: " + value);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        jPanel5.setVisible(false);
        jButton1.setVisible(true);
        jButton2.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
            if(fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                FileReader r = null;
                try {
                    File file = fileChooser.getSelectedFile();
                    try {
                        readPubKey(file);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (FileNotFoundException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }  catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }  
            }            
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        getBalance();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
    
    
    int count = 0;
    boolean nonGenesisBlock = false;
    public void getBalance() {
        System.out.println();
        System.out.println("BALANCE STARTED!");
        count++;
        Float balance = 0f;
        for(int i = 0; i < Chain.blockchain.size(); i++) {
            System.out.println("    BLOCKCHAIN SIZE: " + Chain.blockchain.size());
            for(int j = 0; j < Chain.blockchain.get(i).transactions.size(); j++) {
                /*if(Chain.blockchain.get(i).transactions.get(j)
                        .coinbase_input.addrEqual(publicKey)) {
                    
                    balance = balance + Chain.blockchain.get(i)
                            .transactions.get(j).coinbase_input.value;
                        System.out.println("BALANCE: " + balance + " j:" + j + " i:" + i);
                        
                } else if(Chain.blockchain.get(i).transactions.get(j). // i != 0 &&
                            inputs.addrEqual(publicKey)) {
                    
                    balance = balance + Chain.blockchain.get(i)
                            .transactions.get(j).inputs.value;
                        System.out.println("BALANCE  ELSE: " + balance);     
                }*/
                System.out.println("        ADDR_EQUAL: " + Chain.blockchain.get(i).transactions.get(j). // i != 0 &&
                            inputs.addrEqual(publicKey));
                System.out.println("        VALUE: " + Chain.blockchain.get(i).transactions.get(j). // i != 0 &&
                            inputs.value);
                
                if(Chain.blockchain.get(i).transactions.get(j). // i != 0 &&
                            inputs.addrEqual(publicKey)) {
                    
                    balance = balance + Chain.blockchain.get(i)
                            .transactions.get(j).inputs.value;
                        System.out.println("    BALANCE_INPUTS: " + balance);
                }
            }
        }
        
        /*for(int c = 0; c < transactionCache.size(); c++) {
            if(transactionCache.get(c).outputs.addrEqual(publicKey)) {
                balance = balance + transactionCache.get(c).outputs.value;
                    System.out.println("BALANCE_OUTPUTS: " + balance);
            }
        }*/
        
        for(int c = 1; c < allTransactions.size(); c++) {
            if(allTransactions.get(c).outputs.addrEqual(publicKey)) {
                balance = balance + allTransactions.get(c).outputs.value;
                    System.out.println("BALANCE_OUTPUTS: " + balance);
            }
        }
        /*
        for(int c = 1; c < Chain.blockchain.size(); c++) {
            for(int d = 0; d < Chain.blockchain.get(c).transactions.size(); d++) {
                if(Chain.blockchain.get(c).transactions.get(d).outputs.addrEqual(publicKey)) {
                    balance = balance + Chain.blockchain.get(c).transactions.get(d).outputs.value;
                    System.out.println("    BALANCE_OUTPUTS: "+ balance);
                }
            }
        }*/
        JOptionPane.showMessageDialog(null,
                            "BALANCE: " + Float.toString(balance), "Balance",
                            JOptionPane.INFORMATION_MESSAGE);
        nonGenesisBlock = true;
        System.out.println("  BALANCE: " + balance);
    }
    
    public void viewBlockchain() {
        String blockchainJSON = new GsonBuilder().setPrettyPrinting().create().toJson(Chain.blockchain);
        jTextArea1.setText(blockchainJSON);
    }
    
    public void viewTransactions() {
        String transactionJSON = new GsonBuilder().setPrettyPrinting().create().toJson(transactionCache);
        jTextArea2.setText(transactionJSON);
        
        // DISPLAYS TRANSACTION OUTPUTS / INPUTS TO CONSOLE
        //System.out.println("    TRANSACTION OUTPUTS ADDR: " + Block.transactions.get(Block.transactions.size()-1).outputs.address);
        //System.out.println("    TRANSACTION OUTPUTS VALUE: " + Block.transactions.get(Block.transactions.size()-1).outputs.value);
        //System.out.println("    TRANSACTION INPUTS ADDR: " + Block.transactions.get(Block.transactions.size()-1).inputs.address);
        //System.out.println("    TRANSACTION INPUTS VALUE: " + Block.transactions.get(Block.transactions.size()-1).inputs.value);
    }
    
    public void coinbaseTransaction() throws UnsupportedEncodingException {
        genesisT = new Transaction(null, this.publicKey, 100, "coinbase");
        genesisT.generateCoinbaseSig();
        genesisT.coinbaseTransaction();
        allTransactions.add(genesisT);
        genesisBlock();
        /*transactionCache.add(new Transaction(null, this.publicKey, 100, "coinbase"));
        transactionCache.get(transactionCache.size()-1).generateCoinbaseSig();
        transactionCache.get(transactionCache.size()-1).coinbaseTransaction();*/
        //System.out.println("coinbaseTransaction: "+Block.transactions.get(Block.transactions.size()-1).tx_hash);
        viewTransactions();
        
    }
    
    public void genesisBlock() throws UnsupportedEncodingException {
        Chain.blockchain.add(new Block(index, "", ""));
        Chain.blockchain.get(Chain.blockchain.size()-1).addTransaction(genesisT);
//                .addTransaction(Block.transactions.get(Block.transactions.size() -1));
        Chain.blockchain.get(Chain.blockchain.size()-1).mineBlock();
        viewBlockchain();
    }
    
    public void newBlock() throws UnsupportedEncodingException {
        this.index++;
        System.out.println("SIZE: " + transactionCache.size());
        Chain.blockchain.add(new Block(index, Chain.blockchain.get(Chain.blockchain.size()-1).blockHash, gatherTxHashes()));
        for(int i = 0; i < transactionCache.size(); i++) {
            Chain.blockchain.get(Chain.blockchain.size()-1)
                .addTransaction(transactionCache.get(i));
            System.out.println("ADD: " + transactionCache.get(i).tx_value + " " + i);
        }
        // REMOVES TRANSACTIONS FROM TRANSACTION CACHE
        System.out.println("SIZE: " + transactionCache.size());
        //System.out.println("T1: " + transactionCache.get(0).tx_value);
        //System.out.println("T2: " + transactionCache.get(1).tx_value);
        /*for(int i = 0; i < transactionCache.size(); i++) {
            transactionCache.remove(0);  
        }*/
        for(int i = transactionCache.size()-1; i >= 0; i--) {
            transactionCache.remove(i);
        }
        
        //System.out.println("LEFT: " + transactionCache.get(0).tx_value);

        Chain.blockchain.get(Chain.blockchain.size()-1).mineBlock();
        
        System.out.println("Block Added !"); 
        
        viewBlockchain();
    }
    
    boolean timer = true;
    public void newTransaction() throws UnsupportedEncodingException {
        
        if(checkTransaction()) { // checkTransaction()
            transactionCache.add(new Transaction(this.publicKey, this.pubAddress, this.value, "standard"));
            //Chain.blockchain.get(Block.transactions.size()-1).addTransaction(this.transaction);
            transactionCache.get(transactionCache.size()-1).generateSignature(this.privateKey);
            //Block.transactions.get(Block.transactions.size()-1).verifyConditions();
            transactionCache.get(transactionCache.size()-1).processTransaction();
            
            allTransactions.add(transactionCache.get(transactionCache.size()-1));
            
            System.out.println("TRANSACTION SUCCESFULL!!");
            if(timer) {
                startTimer();
                timer = false;
            }
            
        } else {
            System.out.println("TRANSACTION REJECTED!!");
        }
        
        /*if(num != 0 && num % 2 == 0) {
            newBlock();
        }*/
        
        
        
        viewTransactions();
        
    }
    
    boolean notCoinbase = false;
    public boolean checkTransaction() {
        Float balance = 0f;
        for(int i = 0; i < Chain.blockchain.size(); i++) {
            System.out.println("    BLOCKCHAIN SIZE: " + Chain.blockchain.size());
            for(int j = 0; j < Chain.blockchain.get(i).transactions.size(); j++) {
                /*if(Chain.blockchain.get(i).transactions.get(j)
                        .coinbase_input.addrEqual(publicKey)) {
                    
                    balance = balance + Chain.blockchain.get(i)
                            .transactions.get(j).coinbase_input.value;
                        System.out.println("BALANCE: " + balance + " j:" + j + " i:" + i);
                        
                } else if(Chain.blockchain.get(i).transactions.get(j). // i != 0 &&
                            inputs.addrEqual(publicKey)) {
                    
                    balance = balance + Chain.blockchain.get(i)
                            .transactions.get(j).inputs.value;
                        System.out.println("BALANCE  ELSE: " + balance);     
                }*/
                if(Chain.blockchain.get(i).transactions.get(j). // i != 0 &&
                            inputs.addrEqual(publicKey)) {
                    
                    balance = balance + Chain.blockchain.get(i)
                            .transactions.get(j).inputs.value;
                        System.out.println("    BALANCE_INPUTS: " + balance);
                }
            }
        }
        
        /*for(int c = 0; c < transactionCache.size(); c++) {
            if(transactionCache.get(c).outputs.addrEqual(publicKey)) {
                balance = balance + transactionCache.get(c).outputs.value;
                    System.out.println("BALANCE_OUTPUTS: " + balance);
            }
        }*/
        
        for(int c = 1; c < allTransactions.size(); c++) {
            if(allTransactions.get(c).outputs.addrEqual(publicKey)) {
                balance = balance + allTransactions.get(c).outputs.value;
                    System.out.println("BALANCE_OUTPUTS: " + balance);
            }
        }
        /*
        for(int c = 1; c < Chain.blockchain.size(); c++) {
            for(int d = 0; d < Chain.blockchain.get(c).transactions.size(); d++) {
                if(Chain.blockchain.get(c).transactions.get(d).outputs.addrEqual(publicKey)) {
                    balance = balance + Chain.blockchain.get(c).transactions.get(d).outputs.value;
                    System.out.println("    BALANCE_OUTPUTS: "+ balance);
                }
            }
        }*/
        
        if(balance - this.value > 0) {
            return true;
        } else {
            return false;
        }
    }
    
    public String gatherTxHashes() {
        String gather = "";
        for(int i = 0; i < transactionCache.size(); i++) {
            gather = gather + transactionCache.get(i).tx_hash;
        }
        return gather;
    }
    
    public void startTimer() {
        
        Timer time = new Timer();
        time.schedule(new TimerTask() {

            @Override
            public void run() {
                timer = true;
                try {
                    newBlock();
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        }, 10000);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainFrame().setVisible(true);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables
}
